{
  "info": {
    "_postman_id": "f7e02c7c-057d-496a-a583-b5c94d434a7a",
    "name": "Ondemand_Eventlog_API",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "getToken",
      "item": [
        {
          "name": "getJWTGrant",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "07d3c752-d030-406e-8a0f-aeef1c7c522f",
                "exec": [
                  "pm.globals.set(\"oidc_maskinporten_assertion\",pm.response.text());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "58867a06-ddea-4014-9cfb-a3299d43e3de",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{jwt_grant_url}}?issuer={{client_id}}&audience={{oidc_provider}}&scope=idporten:dcr.read idporten:dcr.write idporten:dcr.modify",
              "host": [
                "{{jwt_grant_url}}"
              ],
              "query": [
                {
                  "key": "issuer",
                  "value": "{{client_id}}"
                },
                {
                  "key": "audience",
                  "value": "{{oidc_provider}}"
                },
                {
                  "key": "scope",
                  "value": "idporten:dcr.read idporten:dcr.write idporten:dcr.modify"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "get Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0e7b679-e713-4d63-bc0f-23549e824e8a",
                "exec": [
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData=pm.response.json();",
                  "    pm.globals.set(\"access_token_sp\",jsonData.access_token);",
                  "",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "215baeb2-eb4c-4f69-80c3-a4704eed5071",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "assertion",
                  "value": "{{oidc_maskinporten_assertion}}",
                  "type": "text"
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "{{oidc_provider_url}}/idporten-oidc-provider/token"
          },
          "response": []
        }
      ],
      "_postman_id": "b0dbebd5-c00c-469d-8956-978af82392db"
    },
    {
      "name": "Logg-innslag",
      "item": [
        {
          "name": "/logg/idporten",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "75ea3cc3-43ca-4719-b8de-974667c6ad94",
                "exec": [
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Test will check integrasjon_id\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[0].integrasjon_id).to.eql(\"test_rp_atest\");",
                  "",
                  "});",
                  "",
                  "",
                  "pm.test(\"response must be valid and have a body\", function () {",
                  "     // assert that the status code is 200",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
                  "     // assert that the response has a valid JSON body",
                  "     pm.response.to.be.withBody;",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
                  "});",
                  "",
                  "pm.test(\"response should be okay to process\", function () { ",
                  "    pm.response.to.not.be.error; ",
                  "    pm.response.to.not.have.jsonBody(\"error\"); ",
                  "});",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "tests[\"tidspunkt is present\"]=responseBody.has(\"tidspunkt\");",
                  "tests[\"tjeneste is present\"]=responseBody.has(\"tjeneste\");",
                  "tests[\"eid is present\"]=responseBody.has(\"eid\");",
                  "tests[\"integrasjon_id is present\"]=responseBody.has(\"integrasjon_id\");",
                  "tests[\"orgno is present\"]=responseBody.has(\"orgno\");",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0a90a173-0390-4d41-bb93-3b6eaa1d5098",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{eventlog_token}}"
              }
            },
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"ssn\": 23079403164\r\n\r\n}"
            },
            "url": {
              "raw": "https://eid-atest-web01.dmz.local/eventlog-api/logg/idporten?maxhits=1",
              "protocol": "https",
              "host": [
                "eid-atest-web01",
                "dmz",
                "local"
              ],
              "path": [
                "eventlog-api",
                "logg",
                "idporten"
              ],
              "query": [
                {
                  "key": "maxhits",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "/rest/v1/person",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "299aba29-2bbf-43bd-bdf9-bec968ee3a7c",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ecf1e525-3977-432c-bfcf-2dd6115e5a49",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "",
                  "    ",
                  "console.log(\"header : \" + request.headers[\"Content-Type\"]);",
                  "console.log(\"authorization : \" + request.headers[\"Authorization\"]);",
                  "console.log(\"body : \" + request.data);",
                  "console.log(\"url : \" + request.url);",
                  "    ",
                  "});",
                  "",
                  "",
                  "",
                  "pm.test(\"response must be valid and have a body\", function () {",
                  "     // assert that the status code is 200",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
                  "     // assert that the response has a valid JSON body",
                  "     pm.response.to.be.withBody;",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
                  "});",
                  "",
                  "pm.test(\"response should be okay to process\", function () { ",
                  "    pm.response.to.not.be.error; ",
                  "    pm.response.to.not.have.jsonBody(\"error\"); ",
                  "});",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ec79b8fc-c102-4763-bf9b-0f8ca1d2b82c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{eventlog_token}}"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/javascript",
                "type": "text"
              }
            ],
            "url": "{{krr_oauth2_server}}/rest/v1/person/"
          },
          "response": []
        }
      ],
      "_postman_id": "ec850ca2-d6e2-45d0-895f-006b2f485c1b"
    },
    {
      "name": "Bruka av kontaktinfo",
      "item": [
        {
          "name": "/logg/kontaktregisteret/all",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "75ea3cc3-43ca-4719-b8de-974667c6ad94",
                "exec": [
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData = pm.response.json();",
                  "    console.log(\"bruk av kontaktinfo from atest\",jsonData);",
                  "    ",
                  "    tests[\"timeStamp is present\"]=responseBody.has(\"timeStamp\");",
                  "tests[\"informasjonsbehov is present\"]=responseBody.has(\"informasjonsbehov\");",
                  "tests[\"log_type is present\"]=responseBody.has(\"log_type\");",
                  "tests[\"log_type_description is present\"]=responseBody.has(\"log_type_description\");",
                  "tests[\"orgno is present\"]=responseBody.has(\"orgno\");",
                  "tests[\"person_identifier is present\"]=responseBody.has(\"person_identifier\");",
                  "});",
                  "",
                  "",
                  "pm.test(\"response must be valid and have a body\", function () {",
                  "     // assert that the status code is 200",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
                  "     // assert that the response has a valid JSON body",
                  "     pm.response.to.be.withBody;",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
                  "});",
                  "",
                  "pm.test(\"response should be okay to process\", function () { ",
                  "    pm.response.to.not.be.error; ",
                  "    pm.response.to.not.have.jsonBody(\"error\"); ",
                  "});",
                  "pm.test(\"Content-Type is present\", function () {",
                  "    pm.response.to.have.header(\"Content-Type\");",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c7d98146-494d-4020-922d-730530d24c54",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{eventlog_token}}"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"ssn\": 23079403164\r\n\r\n}"
            },
            "url": "https://eid-atest-web01.dmz.local/eventlog-api/logg/kontaktregisteret/all"
          },
          "response": []
        }
      ],
      "_postman_id": "a1851434-a455-43bb-868b-5450a2efd1eb"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": {
      "token": "{{accesstoken_eventlogapi}}"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "06e2aacf-02c4-4094-86ca-caf761067cf2",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "655b6888-b408-4dd0-9e56-b78d460b61eb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}