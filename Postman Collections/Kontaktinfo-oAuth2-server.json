{
  "info": {
    "_postman_id": "a4a7f145-3ebe-4ab0-94bf-f6da4cb6cdc6",
    "name": "Kontaktinfo-oAuth2-server",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Hente gyldig accesstoken med riktig scope",
      "item": [
        {
          "name": "postreq",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1058e678-0a2c-4ffa-99ec-7b605755eb90",
                "exec": [
                  "\r",
                  "pm.globals.set(\"maskinporten_assertion\", pm.response.text());\r",
                  "\r",
                  "\r",
                  "pm.globals.set(\"maskinporten_assertion\", pm.response.text());\r",
                  "console.log(\"Maskinporten assertion:     \" +pm.globals.get(\"maskinporten_assertion\"));\r",
                  "\r",
                  "//pm.environment.get(\"variable_key\");\r",
                  "//pm.environment.set(\"variable_key\", \"variable_value\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "1cb83daa-8bb9-4fa7-95f6-2946b46273c1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "http://localhost:9080/jwtgrant?issuer=oidc_test_ytelse&audience=https://eid-systest-web01.dmz.local/maskinporten/&scope=krr:global/kontaktinformasjon.read krr:global/digitalpost.read global/navn.read",
              "protocol": "http",
              "host": [
                "localhost"
              ],
              "port": "9080",
              "path": [
                "jwtgrant"
              ],
              "query": [
                {
                  "key": "issuer",
                  "value": "oidc_test_ytelse"
                },
                {
                  "key": "audience",
                  "value": "https://eid-systest-web01.dmz.local/maskinporten/"
                },
                {
                  "key": "scope",
                  "value": "krr:global/kontaktinformasjon.read krr:global/digitalpost.read global/navn.read"
                }
              ]
            }
          },
          "response": [
            {
              "id": "722bd6bb-a10d-4f1f-90c8-2316eb580444",
              "name": "postreq",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"desiredCapabilities\": {\r\n        \"caps\": {\r\n            \"nativeEvents\": false,\r\n            \"browserName\": \"chrome\",\r\n            \"version\": \"\",\r\n            \"platform\": \"ANY\"\r\n\r\n        }\r\n    }\r\n}"
                },
                "url": "http://localhost:9515/session"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "796277a8-dd4d-4776-bcf2-799bd030a348",
                "exec": [
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData=pm.response.json();",
                  "    pm.environment.set(\"krrtoken\",jsonData.access_token);",
                  "",
                  "});",
                  "",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "bb10aa47-4dde-4cf9-b763-1fd86e6487eb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "Accept",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "type": "text",
                  "value": "urn:ietf:params:oauth:grant-type:jwt-bearer"
                },
                {
                  "key": "assertion",
                  "type": "text",
                  "value": "{{maskinporten_assertion}}"
                },
                {
                  "key": "kid",
                  "value": "roy2",
                  "type": "text",
                  "disabled": true
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "https://eid-systest-web01.dmz.local/idporten-oidc-provider/token"
          },
          "response": []
        }
      ],
      "_postman_id": "85553508-1934-4d94-a035-7e258c311588"
    },
    {
      "name": "getToken",
      "item": [
        {
          "name": "getJWTGrant",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0a738ec-9505-425b-bbe7-3b175988c2ed",
                "exec": [
                  "pm.globals.set(\"oidc_maskinporten_assertion\",pm.response.text());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "758494ff-5cd0-4be4-9713-0dcd701c3c92",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{jwt_grant_url}}?issuer={{client_id}}&audience={{oidc_provider}}&scope=idporten:dcr.read idporten:dcr.write idporten:dcr.modify",
              "host": [
                "{{jwt_grant_url}}"
              ],
              "query": [
                {
                  "key": "issuer",
                  "value": "{{client_id}}"
                },
                {
                  "key": "audience",
                  "value": "{{oidc_provider}}"
                },
                {
                  "key": "scope",
                  "value": "idporten:dcr.read idporten:dcr.write idporten:dcr.modify"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "get Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "096d6095-aa4f-4268-b648-4dcae0159817",
                "exec": [
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var jsonData=pm.response.json();",
                  "    pm.globals.set(\"access_token_sp\",jsonData.access_token);",
                  "",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c764ace8-472a-47b5-a191-9e18dc988dcc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
                  "type": "text"
                },
                {
                  "key": "assertion",
                  "value": "{{oidc_maskinporten_assertion}}",
                  "type": "text"
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "{{oidc_provider_url}}/idporten-oidc-provider/token"
          },
          "response": []
        }
      ],
      "_postman_id": "15177962-8903-4213-b5b0-1038984f23cd"
    },
    {
      "name": "Person",
      "item": [
        {
          "name": "/person (oppdatere spr\u00e5kpreferanse)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9f6affba-9c48-4eb7-a53f-86d74a481c2e",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "94fdb707-1c58-45c0-8840-cac9b972ec6a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{krrtoken}}"
              }
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"spraak\": \"en\"\r\n}"
            },
            "url": "{{krr_oauth2_server}}/rest/v1/person"
          },
          "response": []
        },
        {
          "name": "/person",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eaf0544a-3e81-48db-be6e-47a894a76638",
                "exec": [
                  "pm.test(\"Test will check ssn\", function () {",
                  "    var jsonData = pm.response.json();",
                  "",
                  "    pm.expect(jsonData.personidentifikator).to.eql(pm.environment.get(\"ssn\"));",
                  "   pm.expect(jsonData.reservasjon).to.eql(\"NEI\");",
                  "      pm.expect(jsonData.status).to.eql(\"AKTIV\");",
                  "        ",
                  "      ",
                  "});",
                  "",
                  "pm.test(\"response must be valid and have a body\", function () {",
                  "     // assert that the status code is 200",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
                  "     // assert that the response has a valid JSON body",
                  "     pm.response.to.be.withBody;",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
                  "});",
                  "",
                  "tests[\"personidentifikator is present\"]=responseBody.has(\"personidentifikator\");",
                  "tests[\"reservasjon is present\"]=responseBody.has(\"reservasjon\");",
                  "tests[\"status is present\"]=responseBody.has(\"status\");",
                  "tests[\"spraak is present\"]=responseBody.has(\"spraak\");",
                  "tests[\"epostadresse is present\"]=responseBody.has(\"epostadresse\");",
                  "tests[\"epostadresse_oppdatert is present\"]=responseBody.has(\"epostadresse_oppdatert\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0f76982b-f6aa-4d7b-a807-99a72b1f8072",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{krrtoken}}"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "url": "{{krr_oauth2_server}}/rest/v1/person/"
          },
          "response": []
        }
      ],
      "_postman_id": "79b29ad1-8cbf-45b2-807c-98791888edda"
    },
    {
      "name": "Personer",
      "item": [
        {
          "name": "/personer (1000 stk)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2805a595-98a3-4867-b27c-1ece60353155",
                "exec": [
                  "pm.test(\"KRR personer 1 \", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        \r",
                  "        pm.expect(jsonData.personer[0].personidentifikator).to.eql(pm.environment.get(\"ssn\"));\r",
                  "        pm.expect(jsonData.personer[0].reservasjon).to.eql(\"NEI\");\r",
                  "        pm.expect(jsonData.personer[0].status).to.eql(\"AKTIV\");\r",
                  "      //  pm.expect(jsonData.personer[0].spraak).to.eql(\"en\");  \r",
                  "\r",
                  "});\r",
                  "\r",
                  "pm.test(\"KRR personer 2 \", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        \r",
                  "        pm.expect(jsonData.personer[1].personidentifikator).to.eql(\"23079403083\");\r",
                  "        \r",
                  " \r",
                  "\r",
                  "});\r",
                  "\r",
                  "pm.test(\"KRR personer 3 \", function () {\r",
                  "        var jsonData = pm.response.json();\r",
                  "        \r",
                  "        pm.expect(jsonData.personer[2].personidentifikator).to.eql(\"23079402966\");\r",
                  "        \r",
                  " \r",
                  "\r",
                  "});\r",
                  "\r",
                  "pm.test(\"KRR personer 4 \", function () {\r",
                  "            var jsonData = pm.response.json();\r",
                  "            \r",
                  "            pm.expect(jsonData.personer[3].personidentifikator).to.eql(\"23079402885\");\r",
                  "            pm.expect(jsonData.personer[3].status).to.eql(\"AKTIV\");\r",
                  "            pm.expect(jsonData.personer[3].reservasjon).to.eql(\"NEI\");\r",
                  " \r",
                  "\r",
                  "});\r",
                  "\r",
                  "pm.test(\"KRR personer 5 \", function () {\r",
                  "            var jsonData = pm.response.json();\r",
                  "            \r",
                  "            pm.expect(jsonData.personer[4].personidentifikator).to.eql(\"23079402613\");\r",
                  "            pm.expect(jsonData.personer[4].status).to.eql(\"AKTIV\");\r",
                  "            pm.expect(jsonData.personer[4].reservasjon).to.eql(\"NEI\");\r",
                  " \r",
                  "\r",
                  "});\r",
                  "\r",
                  "pm.test(\"KRR personer 6 \", function () {\r",
                  "            var jsonData = pm.response.json();\r",
                  "            \r",
                  "            pm.expect(jsonData.personer[5].personidentifikator).to.eql(\"23079402532\");\r",
                  "            \r",
                  "            \r",
                  "\r",
                  "});\r",
                  "\r",
                  "pm.test(\"response must be valid and have a body\", function () {\r",
                  "     // assert that the status code is 200\r",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants\r",
                  "     // assert that the response has a valid JSON body\r",
                  "     pm.response.to.be.withBody;\r",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
                  "});\r",
                  "\r",
                  "tests[\"personidentifikator is present\"]=responseBody.has(\"personidentifikator\");\r",
                  "tests[\"reservasjon is present\"]=responseBody.has(\"reservasjon\");\r",
                  "tests[\"status is present\"]=responseBody.has(\"status\");\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ed090b20-5aec-41b1-a82b-deca61ec59e8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": {
                "token": "{{krrtoken}}"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"personidentifikatorer\": [\r\n    {{ssn}},\"23079403083\",\"23079402966\",\"23079402885\",\"23079402613\",\"23079402532\"\r\n  ]\r\n}"
            },
            "url": "{{krr_oauth2_server}}/rest/v1/personer"
          },
          "response": []
        }
      ],
      "_postman_id": "a2c2a408-1e55-41d3-88cd-207f1cc04898"
    },
    {
      "name": "Sertifikat",
      "item": [
        {
          "name": "/printSertifikat",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cb6dbdf4-e778-449f-9d17-7b4845b70fc8",
                "exec": [
                  "pm.test(\"response must be valid and have a body\", function () {",
                  "     // assert that the status code is 200",
                  "     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
                  "     // assert that the response has a valid JSON body",
                  "     pm.response.to.be.withBody;",
                  "     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
                  "});",
                  "",
                  "pm.test(\"Attribute postkasseleverandoerAdresse has correct value <printserver> \", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.postkasseleverandoerAdresse).to.eql(\"printserver\");",
                  "});",
                  "",
                  "pm.test(\"Attribute <x509Sertifikat has correct value <sertifikat> \", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.x509Sertifikat).to.eql(\"MIIDXTCCAkWgAwIBAgIJAOyYwbdZq9oMMA0GCSqGSIb3DQEBBQUAMEUxCzAJBgNVBAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBXaWRnaXRzIFB0eSBMdGQwHhcNMTQwMjI0MjExMTI2WhcNNDEwNzExMjExMTI2WjBFMQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA497PlWbc7g85TK0ln4tCjPvlh2rhKHOtpJ9Gas3Qa7vJO1tkzWp3ZmBFfMG8\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "7b4d666c-4b44-45c5-91cd-4f68a447433c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{krr_oauth2_server}}/rest/v1/printSertifikat"
          },
          "response": []
        }
      ],
      "_postman_id": "6be1f87c-44b2-4d2f-a8d8-4ee331315758"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": {
      "token": "{{krrtoken}}"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "49facd6d-ef4e-43c1-8643-fe53ac2aabd9",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "149a59fa-622e-417c-8a87-2be5faee847f",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}